/*
* Copyright (c) 2005, 2006 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  This file contains all the resources for the module 
*                   USBUINotif.
*
*/


NAME USBN

#include <eikon.rsg>
#include <eikon.rh>

#include <avkon.rsg>
#include <avkon.rh>
#include <avkon.mbg>
#include <avkon.loc>

#include <usbuinotif.loc>


RESOURCE RSS_SIGNATURE { }

//default document name - not used
RESOURCE TBUF { buf=""; }

// === QUERIES ================================================================

//-----------------------------------------------------------------------------
// r_usb_query_with_cancel
// Query resource (with Cancel) 
//-----------------------------------------------------------------------------
//
RESOURCE DIALOG r_usb_query_with_cancel
    {
    flags   = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    items   =
        {
        DLG_LINE
            {
            type    = EAknCtQuery;
            id      = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout    = EConfirmationQueryLayout;
                animation = R_QGN_NOTE_QUERY_ANIM;
                };
            }
        };
    }

//-----------------------------------------------------------------------------
// r_usb_query_without_cancel 
// Query resource (without Cancel) 
//-----------------------------------------------------------------------------
//
RESOURCE DIALOG r_usb_query_without_cancel
    {
    flags   = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_OK_EMPTY__OK;
    items   =
        {
        DLG_LINE
            {
            type    = EAknCtQuery;
            id      = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout    = EConfirmationQueryLayout;
                animation = R_QGN_NOTE_INFO_ANIM;
                };
            }
        };
    }


//-----------------------------------------------------------------------------
// r_usb_on_connection_query
// Defines a dialog for usb mode query
//-----------------------------------------------------------------------------
//
RESOURCE AVKON_LIST_QUERY r_usb_on_connection_query
    {
    items =
        {
        AVKON_LIST_QUERY_DLG_LINE
            {
            control = AVKON_LIST_QUERY_CONTROL
                {
                listtype = EAknCtSingleGraphicPopupMenuListBox;
                listbox = AVKON_LIST_QUERY_LIST
                    {
                    array_id = r_usb_empty_array;
                    };
                heading = qtn_usb_mode_query_header; 
                };
            }
        };
    }


//-----------------------------------------------------------------------------
//Prompts for message queries
//-----------------------------------------------------------------------------
//
RESOURCE TBUF r_usb_mode_msg_header {
    buf=qtn_usb_mode_msg_header; }

RESOURCE TBUF r_usb_mode_msg_mass_storage {
    buf= "%U mode :\n"qtn_usb_mode_msg_mass_storage"\n<AknMessageQuery Link>"qtn_usb_mode_msg_link"</AknMessageQuery Link>"; }

RESOURCE TBUF r_usb_mode_msg_pc_suite {
    buf= "%U mode :\n"qtn_usb_mode_msg_pc_suite"\n<AknMessageQuery Link>" qtn_usb_mode_msg_link"</AknMessageQuery Link>"; }

RESOURCE TBUF r_usb_mode_msg_mtp {
    buf= "%U mode :\n"qtn_usb_mode_msg_mtp"\n<AknMessageQuery Link>" qtn_usb_mode_msg_link"</AknMessageQuery Link>"; }

RESOURCE TBUF r_usb_mode_msg_ptp {
    buf= "%U mode :\n"qtn_usb_mode_msg_ptp"\n<AknMessageQuery Link>" qtn_usb_mode_msg_link"</AknMessageQuery Link>"; }

RESOURCE TBUF r_usb_mode_msg_link {
    buf=qtn_usb_mode_msg_link; }

//-----------------------------------------------------------------------------
// r_usb_on_connection_message_query
// Defines a dialog for ask on connection query
//-----------------------------------------------------------------------------
//   
RESOURCE DIALOG r_usb_on_connection_message_query 
    {
    flags = EGeneralQueryFlags | EEikDialogFlagNoBorder | EEikDialogFlagNoShadow;
    buttons = R_AVKON_SOFTKEYS_OK_EMPTY__OK;
    items=
        {
        DLG_LINE 
            {
            type = EAknCtPopupHeadingPane;
            id = EAknMessageQueryHeaderId;
            control = AVKON_HEADING
                {
                label = header_not_defined;
                };
            },
        DLG_LINE
            {
            type = EAknCtMessageQuery;
            id = EAknMessageQueryContentId;
            control = AVKON_MESSAGE_QUERY
                {
                };
            }
        };
    }


//-----------------------------------------------------------------------------
// r_usb_empty_array
// Defines an empty array
//-----------------------------------------------------------------------------
RESOURCE ARRAY r_usb_empty_array
    {
    items=
        {
        LBUF { txt=""; }
        };
    }


//-----------------------------------------------------------------------------
// Prompts for information notes
//-----------------------------------------------------------------------------
//

//-----------------------------------------------------------------------------
// Prompts for confirmation queries
//-----------------------------------------------------------------------------
//
#ifndef RD_MULTIPLE_DRIVE
RESOURCE TBUF r_usb_memory_card_locked { 
    buf = qtn_usb_mode_note_memory_card_locked; }

RESOURCE TBUF r_usb_cable_unsafely_removed {
    buf = qtn_usb_mode_note_cable_unsafely_removed; }

RESOURCE TBUF r_usb_memorycard_unsafely_removed { 
    buf = qtn_usb_mode_note_mmc_unsafely_removed; }
#endif

RESOURCE TBUF r_usb_change_from_mass_storage {
    buf = qtn_usb_mode_query_change_from_mass_storage; }

RESOURCE TBUF r_usb_storage_media_failure { 
    buf = qtn_usb_mode_note_storage_media_failure; }

// USB OTG Resources

//-----------------------------------------------------------------------------
// r_usb_query_otg_error
//-----------------------------------------------------------------------------
//
RESOURCE DIALOG r_usb_query_otg_error
    {
    flags   = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_OK_EMPTY__OK;
    items   =
        {
        DLG_LINE
            {
            type    = EAknCtQuery;
            id      = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout    = EConfirmationQueryLayout;
                animation = R_QGN_NOTE_ERROR_ANIM;
                };
            }
        };
    }

RESOURCE TBUF r_usb_otg_error_current_limit { 
    buf = qtn_usb_otg_error_current_limit; }

RESOURCE TBUF r_usb_otg_error_too_much_current_required { 
    buf = qtn_usb_otg_error_too_much_current_required; }
    
RESOURCE TBUF r_usb_otg_error_unsupported { 
    buf = qtn_usb_otg_error_unsupported; }

RESOURCE TBUF r_usb_otg_error_hub_unsupported { 
    buf = qtn_usb_otg_error_hub; }

RESOURCE TBUF r_usb_otg_error_unrecoverable { 
    buf = qtn_usb_otg_error_unrecoverable; }

RESOURCE TBUF r_usb_otg_warning_partial_supported { 
    buf = qtn_usb_otg_warning_partial_supported; }

RESOURCE TBUF r_usb_no_memory_card {
    buf = qtn_usb_mode_query_no_memory_card; }

RESOURCE TBUF r_usb_otg_error_attach_timedout { 
    buf = qtn_usb_otg_error_cable; }

RESOURCE TBUF r_usb_msmm_error_unknown_filesystem { 
    buf = qtn_usb_otg_error_unsupported_filesystem; }

RESOURCE TBUF r_usb_msmm_error_general_mass_storage_error { 
    buf = qtn_usb_otg_general_mass_storage_error; }

RESOURCE TBUF r_usb_msmm_error_out_of_memory { 
    buf = qtn_memlo_not_enough_memory; }

// End of File
